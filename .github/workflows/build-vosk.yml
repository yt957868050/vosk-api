name: Build Vosk ARM64

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04-arm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build prerequisites
        run: |
          set -euxo pipefail
          BUILD_ROOT="${RUNNER_TEMP}/vosk-build"
          sudo apt-get update
          packages=(
            build-essential
            gfortran
            cmake
            automake
            autoconf
            libtool
            pkg-config
            zlib1g-dev
            sox
            wget
            curl
            git
            python3
            python-is-python3
            python3-dev
            python2
            openjdk-11-jdk
            maven
            swig
            unzip
            rsync
          )
          sudo apt-get install -y --no-install-recommends "${packages[@]}"

      - name: Build OpenBLAS (ARM64)
        run: |
          set -euxo pipefail
          BUILD_ROOT="${RUNNER_TEMP}/vosk-build"
          OPENBLAS_SRC="$BUILD_ROOT/openblas-src"
          OPENBLAS_INSTALL="$BUILD_ROOT/openblas-install"

          mkdir -p "$BUILD_ROOT"
          git clone --depth 1 --branch v0.3.13 https://github.com/OpenMathLib/OpenBLAS.git "$OPENBLAS_SRC"

          make -C "$OPENBLAS_SRC" TARGET=ARMV8 USE_OPENMP=0 DYNAMIC_ARCH=0 NO_SHARED=0 NO_STATIC=0 BINARY=64 -j"$(nproc)"
          make -C "$OPENBLAS_SRC" PREFIX="$OPENBLAS_INSTALL" install

      - name: Clone and build Kaldi (libraries only)
        run: |
          set -euxo pipefail
          BUILD_ROOT="${RUNNER_TEMP}/vosk-build"
          OPENBLAS_INSTALL="$BUILD_ROOT/openblas-install"
          KALDI_ROOT="$BUILD_ROOT/kaldi"

          git clone --depth 1 https://github.com/alphacep/kaldi.git "$KALDI_ROOT"

          pushd "$KALDI_ROOT/tools"
          extras/check_dependencies.sh || true
          make -j"$(nproc)" OPENFST_CONFIGURE="--enable-static --enable-shared --with-pic --enable-ngram-fsts"
          python2 extras/generate_concat_table.py || true
          popd

          pushd "$KALDI_ROOT/src"
          CFLAGS="-fPIC -O2 -march=armv8-a" \
          CXXFLAGS="-fPIC -O2 -march=armv8-a -std=c++14" \
            ./configure --shared --static --use-cuda=no --openblas-root="$OPENBLAS_INSTALL"

          make clean
          make -j"$(nproc)" base matrix util feat tree gmm lat lm fstext hmm transform cudamatrix online2 ivector rnnlm nnet3
          popd

      - name: Build Vosk native libraries
        run: |
          set -euxo pipefail
          BUILD_ROOT="${RUNNER_TEMP}/vosk-build"
          KALDI_ROOT="$BUILD_ROOT/kaldi"
          OPENBLAS_INSTALL="$BUILD_ROOT/openblas-install"
          VOSK_SRC="$BUILD_ROOT/vosk-api"
          JNI_OUT_DIR="$BUILD_ROOT/artifacts"

          git clone --depth 1 --branch v0.3.45 https://github.com/alphacep/vosk-api.git "$VOSK_SRC"

          sed -i 's|#include "decoder/decoder-wrappers.h"|#include "decoder/decoder-wrappers.h"\n#include "lat/word-align-lattice.h"|' "$VOSK_SRC/src/recognizer.cc"
          sed -i 's/WordAlignLatticePartial(/kaldi::WordAlignLattice(/g' "$VOSK_SRC/src/recognizer.cc"
          sed -i 's|install/lib/liblapacke.a install/lib/libf2c.a|install/lib/liblapacke.a|' "$VOSK_SRC/src/Makefile"

          mkdir -p "$KALDI_ROOT/tools/OpenBLAS/install"
          rsync -a "$OPENBLAS_INSTALL/" "$KALDI_ROOT/tools/OpenBLAS/install/"

          export KALDI_ROOT
          export OPENBLAS_ROOT="$OPENBLAS_INSTALL"
          export LD_LIBRARY_PATH="$KALDI_ROOT/src/lib:$OPENBLAS_INSTALL/lib:${LD_LIBRARY_PATH:-}"
          export JAVA_HOME="$(dirname "$(dirname "$(readlink -f "$(which javac)")")")"

          pushd "$VOSK_SRC/src"
          make clean || true
          make -j"$(nproc)"
          popd

          mkdir -p "$JNI_OUT_DIR"

          g++ -shared -fPIC -O2 -std=c++17 \
            -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" \
            -I"$VOSK_SRC/java/src/main/jni" \
            -I"$KALDI_ROOT/src" \
            -I"$KALDI_ROOT/tools/openfst/include" \
            -I"$OPENBLAS_INSTALL/include" \
            "$VOSK_SRC/java/src/main/jni/vosk_wrap.cxx" \
            -L"$VOSK_SRC/src" -lvosk \
            -L"$KALDI_ROOT/src/lib" \
            -lkaldi-online2 -lkaldi-decoder -lkaldi-ivector -lkaldi-gmm \
            -lkaldi-tree -lkaldi-feat -lkaldi-lat -lkaldi-lm -lkaldi-rnnlm \
            -lkaldi-hmm -lkaldi-nnet3 -lkaldi-transform -lkaldi-cudamatrix \
            -lkaldi-matrix -lkaldi-fstext -lkaldi-util -lkaldi-base \
            -L"$KALDI_ROOT/tools/openfst/lib" -lfst -lfstngram \
            -L"$OPENBLAS_INSTALL/lib" -lopenblas \
            -ldl -lpthread -lm \
            -Wl,-rpath,'$ORIGIN' \
            -o "$JNI_OUT_DIR/libvosk_jni.so"

          cp "$VOSK_SRC/src/libvosk.so" "$JNI_OUT_DIR/"
          cp "$VOSK_SRC/src/vosk_api.h" "$JNI_OUT_DIR/"
          cp "$VOSK_SRC/src/vosk_api.cpp" "$JNI_OUT_DIR/"

      - name: Package artifacts
        run: |
          set -euxo pipefail
          BUILD_ROOT="${RUNNER_TEMP}/vosk-build"
          tar -C "$BUILD_ROOT/artifacts" -czf "$BUILD_ROOT/vosk-arm64-libs.tar.gz" .

      - name: Upload libraries
        uses: actions/upload-artifact@v4
        with:
          name: vosk-arm64-libs
          path: |
            ${{ runner.temp }}/vosk-build/artifacts/libvosk.so
            ${{ runner.temp }}/vosk-build/artifacts/libvosk_jni.so
            ${{ runner.temp }}/vosk-build/artifacts/vosk_api.h
            ${{ runner.temp }}/vosk-build/artifacts/vosk_api.cpp
            ${{ runner.temp }}/vosk-build/vosk-arm64-libs.tar.gz
